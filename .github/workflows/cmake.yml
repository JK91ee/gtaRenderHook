name: CMake

on:
  push:
    branches: [ "development" ]

env:
  BUILD_TYPE: RelWithDebInfo
  VULKAN_SDK: C:\\VulkanSDK\\1.2.189.0

permissions:
  id-token: "write"
  contents: "write"
  packages: "write"

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Get commit hash
        run: echo "CommitHash=$(git rev-parse --short=7 HEAD)" >> $env:GITHUB_ENV

      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build_x64
          ${{runner.workspace}}/build_x86
          ${{runner.workspace}}/artifacts/gta3
          ${{runner.workspace}}/artifacts/gtavc
          ${{runner.workspace}}/artifacts/gtasa

      - name: Cache Vulkan SDK
        id: cache-vulkan-sdk
        uses: actions/cache@v1
        with:
          path: "C:\\VulkanSDK\\1.2.189.0"
          key: vulkan-sdk-1.2.189.0

      - name: Setup Vulkan
        if: steps.cache-vulkan-sdk.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/1.2.189.0/windows/VulkanSDK-1.2.189.0-Installer.exe" -OutFile VulkanSDK.exe
          $installer = Start-Process -FilePath VulkanSDK.exe -Wait -PassThru -ArgumentList @("/S");
          $installer.WaitForExit();
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Restore from cache and install vcpkg
        uses: lukka/run-vcpkg@v10.7
        with:
          setupOnly: true
          vcpkgGitCommitId: 1e9facc7992107ad639b4dcc87bd9a7ade1594e8
      - run: |
          $VCPKG_ROOT/vcpkg install @response_file.txt
        shell: bash
      - name: Configure CMake x64
        shell: bash
        working-directory: ${{runner.workspace}}/build_x64
        run: cmake $GITHUB_WORKSPACE
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake
          -DCMAKE_CXX_FLAGS="/DWIN32 /D_WINDOWS /std:c++latest /W4 /GR /EHsc  /MT"
          -DARCH_64BIT=ON
          -DBUILD_32BIT_LIBS=ON
          -DGTA_3_FOLDER="${{runner.workspace}}\\artifacts\\gta3\\"
          -DGTA_VC_FOLDER="${{runner.workspace}}\\artifacts\\gtavc\\"
          -DGTA_SA_FOLDER="${{runner.workspace}}\\artifacts\\gtasa\\"
          -DVCPKG_TARGET_TRIPLET=x64-windows-static -A x64

      - name: Build x64
        working-directory: ${{runner.workspace}}/build_x64
        shell: bash
        run: cmake --build . --config $BUILD_TYPE --target gta_3_render_driver gta_vc_render_driver gta_sa_render_driver

      - name: Configure CMake x86
        shell: bash
        working-directory: ${{runner.workspace}}/build_x86
        run: cmake $GITHUB_WORKSPACE
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake
          -DCMAKE_C_FLAGS="-m32"
          -DCMAKE_CXX_FLAGS="-m32 /DWIN32 /D_WINDOWS /std:c++latest /W4 /GR /EHsc  /MT"
          -DBUILD_32BIT_LIBS=ON
          -DGTA_3_FOLDER="${{runner.workspace}}\\artifacts\\gta3\\"
          -DGTA_VC_FOLDER="${{runner.workspace}}\\artifacts\\gtavc\\"
          -DGTA_SA_FOLDER="${{runner.workspace}}\\artifacts\\gtasa\\"
          -DVCPKG_TARGET_TRIPLET=x86-windows-static -A Win32

      - name: Build x86
        working-directory: ${{runner.workspace}}/build_x86
        shell: bash
        run: cmake --build . --config $BUILD_TYPE --target gta_3_render_hook gta_vc_render_hook gta_sa_render_hook

      - name: Upload artifacts - GTA 3
        uses: actions/upload-artifact@v2
        with:
          name: gta3_rh-${{env.CommitHash}}
          path: ${{runner.workspace}}/artifacts/gta3

      - name: Upload artifacts - GTA VC
        uses: actions/upload-artifact@v2
        with:
          name: gtavc_rh-${{env.CommitHash}}
          path: ${{runner.workspace}}/artifacts/gtavc

      - name: Upload artifacts - GTA SA
        uses: actions/upload-artifact@v2
        with:
          name: gtasa_rh-${{env.CommitHash}}
          path: ${{runner.workspace}}/artifacts/gtasa
